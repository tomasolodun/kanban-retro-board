{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let BoardService = /*#__PURE__*/(() => {\n  class BoardService {\n    constructor() {\n      this.initBoard = [// {\n        //   id: 1,\n        //   title: 'To Do',\n        //   color: '#009886',\n        //   list: [\n        //     {\n        //       id: 1,\n        //       text: 'Example card item',\n        //       like: 1,\n        //       comments: [\n        //         {\n        //           id: 1,\n        //           text: 'Some comment'\n        //         }\n        //       ]\n        //     },\n        //   ]\n        // },\n      ];\n      this.board = this.initBoard;\n      this.board$ = new BehaviorSubject(this.initBoard);\n    }\n\n    getBoard$() {\n      return this.board$.asObservable();\n    }\n\n    changeColumnColor(color, columnId) {\n      this.board = this.board.map(column => {\n        if (column.id === columnId) {\n          column.color = color;\n        }\n\n        return column;\n      });\n      this.board$.next([...this.board]);\n    }\n\n    addColumn(title) {\n      const newColumn = {\n        id: Date.now(),\n        title: title,\n        color: '#009886',\n        list: []\n      };\n      this.board = [...this.board, newColumn];\n      this.board$.next([...this.board]);\n    }\n\n    addCard(text, columnId) {\n      const newCard = {\n        id: Date.now(),\n        text,\n        like: 0,\n        comments: []\n      };\n      this.board = this.board.map(column => {\n        if (column.id === columnId) {\n          column.list = [newCard, ...column.list];\n        }\n\n        return column;\n      });\n      this.board$.next([...this.board]);\n    }\n\n    deleteColumn(columnId) {\n      this.board = this.board.filter(column => column.id !== columnId);\n      this.board$.next([...this.board]);\n    }\n\n    deleteCard(cardId, columnId) {\n      this.board = this.board.map(column => {\n        if (column.id === columnId) {\n          column.list = column.list.filter(card => card.id !== cardId);\n        }\n\n        return column;\n      });\n      this.board$.next([...this.board]);\n    }\n\n    changeLike(cardId, columnId, increase) {\n      this.board = this.board.map(column => {\n        if (column.id === columnId) {\n          const list = column.list.map(card => {\n            if (card.id === cardId) {\n              if (increase) {\n                card.like++;\n              } else {\n                if (card.like > 0) {\n                  card.like--;\n                }\n              }\n            }\n\n            return card;\n          });\n          column.list = list;\n          return column;\n        } else {\n          return column;\n        }\n      });\n      this.board$.next([...this.board]);\n    }\n\n    addComment(columnId, cardId, text) {\n      this.board = this.board.map(column => {\n        if (column.id === columnId) {\n          const list = column.list.map(card => {\n            if (card.id === cardId) {\n              const newComment = {\n                id: Date.now(),\n                text\n              };\n              card.comments = [newComment, ...card.comments];\n            }\n\n            return card;\n          });\n          column.list = list;\n        }\n\n        return column;\n      });\n      this.board$.next([...this.board]);\n    }\n\n    deleteComment(columnId, itemId, commentId) {\n      this.board = this.board.map(column => {\n        if (column.id === columnId) {\n          const list = column.list.map(item => {\n            if (item.id === itemId) {\n              item.comments = item.comments.filter(comment => {\n                return comment.id !== commentId;\n              });\n            }\n\n            return item;\n          });\n          column.list = list;\n        }\n\n        return column;\n      });\n      this.board$.next([...this.board]);\n    }\n\n  }\n\n  BoardService.ɵfac = function BoardService_Factory(t) {\n    return new (t || BoardService)();\n  };\n\n  BoardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BoardService,\n    factory: BoardService.ɵfac,\n    providedIn: 'root'\n  });\n  return BoardService;\n})();","map":null,"metadata":{},"sourceType":"module"}